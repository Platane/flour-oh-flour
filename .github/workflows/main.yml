name: main

on: [push, pull_request]

jobs:
  main:
    runs-on: ubuntu-latest

    steps:
      # prepare var and create a deployment
      - name: generate deploy url
        id: url
        run: |
          ORIGIN=$SHA-platane-js13k2020.surge.sh
          echo $ORIGIN
          echo "::set-output name=deploy_origin::$ORIGIN"
          echo "::set-output name=deploy_url::https://$ORIGIN/index.html"
          echo "::set-output name=bundle_url::https://$ORIGIN/bundle.zip"
          echo "::set-output name=report_url::https://$ORIGIN/report.json"
        env:
          SHA: ${{ github.sha }}

      - name: start github deployment
        uses: chrnorm/deployment-action@releases/v1
        id: deployment
        with:
          token: ${{ github.token }}
          target_url: ${{ steps.url.outputs.deploy_url }}
          environment: preview
          ref: ${{ github.sha }}

      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1.4.2
        with:
          node-version: 14

      - uses: bahmutov/npm-install@v1.4.1

      - run: yarn type
      - run: yarn lint
      - run: yarn test --ci

      - run: sudo apt install advancecomp

      - run: yarn build

      - name: get bundle size
        id: size
        run: |
          echo "::set-output name=size::`du -b dist/bundle.zip | cut -f1`"
          echo "::set-output name=size_human::`du -bh dist/bundle.zip | cut -f1`"

      - run: yarn surge ./dist $DEPLOY_ORIGIN
        env:
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          DEPLOY_ORIGIN: ${{ steps.url.outputs.deploy_origin }}

      - name: mark the github deployment as failed
        uses: chrnorm/deployment-status@releases/v1
        if: ${{ failure() }}
        with:
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          token: ${{ github.token }}
          state: "failure"

      - name: mark the github deployment as successful
        uses: chrnorm/deployment-status@releases/v1
        with:
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          token: ${{ github.token }}
          target_url: ${{ steps.url.outputs.deploy_url }}
          state: "success"

      - name: comment on commit with useful info
        uses: peter-evans/commit-comment@v1
        with:
          token: ${{ github.token }}
          sha: ${{ github.sha }}
          body: |
            preview url [${{ steps.url.outputs.deploy_origin }}](${{ steps.url.outputs.deploy_url }})
            [analyze report](${{ steps.url.outputs.report_url }})
            [bundle.zip](${{ steps.url.outputs.bundle_url }}) ${{ steps.size.outputs.size }} (${{ steps.size.outputs.size_human }})

      - name: deploy to gh-pages
        uses: crazy-max/ghaction-github-pages@v2.1.1
        with:
          target_branch: gh-pages
          build_dir: dist
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN_GH_PAGES }}

      - name: test the bundle against the report endpoint
        run: curl -X POST --form bundle=@dist/bundle.zip --form category=desktop https://iw8sii1h9b.execute-api.eu-west-1.amazonaws.com/stage/analyze-bundle >> dist/report.json

      - run: yarn surge ./dist $DEPLOY_ORIGIN
        env:
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          DEPLOY_ORIGIN: ${{ steps.url.outputs.deploy_origin }}

      - name: fails if the report failed
        run: node -e "for (const c of require('./dist/report.json').checks){if(c.result!=='ok'){console.error(c);throw c.description;}}"
