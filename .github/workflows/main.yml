name: main

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1.4.2
        with:
          node-version: 14

      - uses: bahmutov/npm-install@v1.4.1

      - run: yarn type
      - run: yarn lint
      - run: yarn test --ci

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1.4.2
        with:
          node-version: 14

      - run: sudo apt install advancecomp

      - uses: bahmutov/npm-install@v1.4.1

      - run: yarn build

      - uses: actions/upload-artifact@v2
        with:
          name: build
          path: ./dist/*

  deploy-ghpages:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1.4.2
        with:
          node-version: 14

      - uses: actions/download-artifact@v2
        with:
          name: build
          path: dist

      - name: generate badge
        run: |
          node -e "const s=require('fs').statSync('dist/bundle.zip').size;console.log(JSON.stringify({label:'size',message:(s/1024).toFixed(2)+'K',color:s<13312?'success':'important'}))" > dist/shieldio_size.json

      - name: copy screenshots
        run: |
          cp -r doc/screenshots/* dist/images

      - name: deploy to gh-pages
        uses: crazy-max/ghaction-github-pages@v2.1.1
        if: success() && github.ref == 'refs/heads/master'
        with:
          target_branch: gh-pages
          build_dir: dist
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN_GH_PAGES }}

  deploy-surge:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: generate deploy url
        id: url
        run: |
          ORIGIN=${SHA:0:7}-platane-js13k2020.surge.sh
          echo "::set-output name=deploy_origin::$ORIGIN"
          echo "::set-output name=deploy_url::https://$ORIGIN/index.html"
        env:
          SHA: ${{ github.sha }}

      - name: start github deployment
        uses: chrnorm/deployment-action@releases/v1
        id: deployment
        with:
          token: ${{ github.token }}
          environment: preview
          ref: ${{ github.sha }}

      - uses: actions/download-artifact@v2
        with:
          name: build
          path: dist

      - uses: dswistowski/surge-sh-action@v1
        with:
          domain: ${{ steps.url.outputs.deploy_origin }}
          project: ./dist
          login: ${{ secrets.SURGE_LOGIN }}
          token: ${{ secrets.SURGE_TOKEN }}

      - name: mark the github deployment as failed
        uses: chrnorm/deployment-status@releases/v1
        if: ${{ failure() }}
        with:
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          token: ${{ github.token }}
          state: "failure"

      - name: mark the github deployment as successful
        uses: chrnorm/deployment-status@releases/v1
        with:
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          token: ${{ github.token }}
          target_url: ${{ steps.url.outputs.deploy_url }}
          environment_url: ${{ steps.url.outputs.deploy_url }}
          state: "success"

  analyze-bundle:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v1.4.2
        with:
          node-version: 14

      - uses: actions/download-artifact@v2
        with:
          name: build

      - name: test the bundle against the report endpoint
        run: curl --silent -X POST --form bundle=@bundle.zip --form category=desktop https://iw8sii1h9b.execute-api.eu-west-1.amazonaws.com/stage/analyze-bundle > report.json

      - name: fails if the report failed
        run: node -e "for (const c of require('./report.json').checks){if(c.result!=='ok'){console.error(c);throw c.description;}}"

      - uses: actions/upload-artifact@v2
        with:
          name: bundle-analyzer-report
          path: report.json
